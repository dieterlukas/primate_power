# Keep this script file in the same folder as the three input files (population data, species variables, phylogeny)
# This command will then tell R where to find these input files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("AnalysisCode/FemaleDominance_LoadData.r")
source("AnalysisCode/FemaleDominance_FunctionsPairwise.r")
allcontinuouspredictors<-c("sexratio", "SexualDimorphism_MaleWeight_over_FemaleWeight", "CanineDimorphism", "female_average_relatedness", "Synchrony", "r_seasonality_value", "male_skew", "env_harshness", "rainfall_unpredictability","NDVI_Seasonality", "female_canine_height", "male_canine_height", "females","homerange_overlap","perc_aggression_mm","receptive_synchrony","body_mass","relative_testes_mass","relative_femalecaninesize")
alldiscretepredictors<-c("SocOrgPMK","MatSysPMK","female_dispersal","male_dispersal","sexbias_dispersal","jointaggression_females","jointaggression_males","female_evictions","female_infanticide" ,"ovulation_signs","Strata_Wilman","origin")
samplesizetable<-matrix(ncol=3,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size","number of species")
count<-1
for(i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
samplesizetable[count,1]<-continuouspredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$continuouspredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$continuouspredictor)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "continuouspredictor"]<-c(continuouspredictor)
count<-count+1
}
for(i in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[i]
colnames(combined)[colnames(combined) %in% discretepredictor]<-c("discretepredictor")
samplesizetable[count,1]<-discretepredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$discretepredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$discretepredictor)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "discretepredictor"]<-c(discretepredictor)
count<-count+1
}
write.csv(samplesizetable,file="FemdomAnalyses_Oct2022_Samplesizes.csv")
for (k in 1:1){
# Start with the continuous predictors
for (i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
print(c("continuous",i,"of",length(allcontinuouspredictors),continuouspredictor))
results<-run_analyses_continuouspredictor(continuouspredictor)
ifelse(i==1,allresults<-results,allresults<-rbind(allresults,results))
}
# Next with the discrete predictors
for (j in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[j]
print(c("discrete",j,"of",length(alldiscretepredictors),discretepredictor))
results<-run_analyses_discretepredictor(discretepredictor)
ifelse(j==1,alldiscreteresults<-results,alldiscreteresults<-rbind(alldiscreteresults,results))
}
colnames(alldiscreteresults)<-colnames(allresults)
combinedresults<-rbind(allresults,alldiscreteresults)
}
results<-matrix(nrow=8,ncol=5)
results<-as.data.frame(results)
colnames(results)<-c("outcome", "continuouspredictor","phylogeny", "estimate lower","estimate upper")
results$outcome<-c(rep("perc_won", 2),rep("strict three way", 2),rep("strict female dominance",2),rep("strict male dominance,2"))
results<-matrix(nrow=8,ncol=5)
results
results<-as.data.frame(results)
colnames(results)<-c("outcome", "continuouspredictor","phylogeny", "estimate lower","estimate upper")
results
for (k in 1:1){
# Start with the continuous predictors
for (i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
print(c("continuous",i,"of",length(allcontinuouspredictors),continuouspredictor))
results<-run_analyses_continuouspredictor(continuouspredictor)
ifelse(i==1,allresults<-results,allresults<-rbind(allresults,results))
}
# Next with the discrete predictors
for (j in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[j]
print(c("discrete",j,"of",length(alldiscretepredictors),discretepredictor))
results<-run_analyses_discretepredictor(discretepredictor)
ifelse(j==1,alldiscreteresults<-results,alldiscreteresults<-rbind(alldiscreteresults,results))
}
colnames(alldiscreteresults)<-colnames(allresults)
combinedresults<-rbind(allresults,alldiscreteresults)
}
source("AnalysisCode/FemaleDominance_FunctionsPairwise.r")
for (k in 1:1){
# Start with the continuous predictors
for (i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
print(c("continuous",i,"of",length(allcontinuouspredictors),continuouspredictor))
results<-run_analyses_continuouspredictor(continuouspredictor)
ifelse(i==1,allresults<-results,allresults<-rbind(allresults,results))
}
# Next with the discrete predictors
for (j in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[j]
print(c("discrete",j,"of",length(alldiscretepredictors),discretepredictor))
results<-run_analyses_discretepredictor(discretepredictor)
ifelse(j==1,alldiscreteresults<-results,alldiscreteresults<-rbind(alldiscreteresults,results))
}
colnames(alldiscreteresults)<-colnames(allresults)
combinedresults<-rbind(allresults,alldiscreteresults)
}
continuouspredictor
results
head(*)dstan_strict)
head(dstan_strict)
head(combined)
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
results<-matrix(nrow=8,ncol=5)
results<-as.data.frame(results)
colnames(results)<-c("outcome", "continuouspredictor","phylogeny", "estimate lower","estimate upper")
results$outcome<-c(rep("perc_won", 2),rep("strict three way", 2),rep("strict female dominance",2),rep("strict male dominance",2))
results$continuouspredictor<-rep(continuouspredictor,8)
results$phylogeny<-c(rep(c("No","Yes"),4))
dstan_continuous <- combined[ complete.cases(combined$perc_won_females,combined$continuouspredictor,combined$corrected_species_id),]
dstan_strict <- combined[ complete.cases(combined$strictfdom,combined$continuouspredictor,combined$corrected_species_id),]
dstan_relaxed <- combined[ complete.cases(combined$mostlyfdom,combined$continuouspredictor,combined$corrected_species_id),]
print("Finished setup")
# Continuous outcome: percentage of fights won by females
dat_list_continuous <- list(
N_spp = nrow(dstan_continuous),
perc_won_females = as.integer(dstan_continuous$perc_won_females),
continuouspredictor = standardize(dstan_continuous$continuouspredictor),
species = as.integer(as.factor(dstan_continuous$corrected_species_id)),
total = rep(100,nrow(dstan_continuous))
)
m_continuous_continuous <- ulam(
alist(
perc_won_females ~ dbinom(total,p),
logit(p) <- a +b*continuouspredictor,
## adaptive priors
a ~ dnorm( 0 , 1 ),
b ~ dnorm(0,1)
) , data=dat_list_continuous , chains=4 , cores=4 , log_lik=TRUE , cmdstan=T, messages=FALSE)
results[1,4:5]<-precis(m_continuous_continuous)[2,3:4]
print("finished m_continuous_continuous")
spp_obs<-unique(dstan_continuous$corrected_species_id)
spp_obs<-matrix(nrow=length(spp_obs))
rownames(spp_obs)<-unique(dstan_continuous$corrected_species_id)
# We match the species in the dataset to the species in the phylogenetic tree
missing<-treedata(inputtree,data=spp_obs,warnings=FALSE)
# We remove species with no data from the tree
mtree<-missing$phy
# We calculate the pair-wise phylogenetic distances among the species in the tree; this gives a matrix where values are the total branch length needed to connect two species (diagonal is the distance of a species to itself so zero)
Dmat<-cophenetic(mtree)
dat_list_continuous_phylogenetic <- list(
perc_won_females = as.integer(dstan_continuous$perc_won_females),
continuouspredictor = standardize(dstan_continuous$continuouspredictor),
species = as.integer(as.factor(dstan_continuous$corrected_species_id)),
total = rep(100,nrow(dstan_continuous))
)
dat_list_continuous_phylogenetic$Dmat<-Dmat[ unique(dstan_continuous$corrected_species_id),unique(dstan_continuous$corrected_species_id) ]/max(Dmat)
colnames(dat_list_continuous_phylogenetic$Dmat)<-as.integer(as.factor(colnames(dat_list_continuous_phylogenetic$Dmat)))
rownames(dat_list_continuous_phylogenetic$Dmat)<-as.integer(as.factor(rownames(dat_list_continuous_phylogenetic$Dmat)))
dat_list_continuous_phylogenetic$N_spp<-length(unique(dstan_continuous$corrected_species_id))
m_continuous_continuous_phylogenetic <- ulam(
alist(
perc_won_females ~ dbinom(total,p),
logit(p) <- k[species] +b*continuouspredictor,
vector[N_spp]:k ~ multi_normal( 0 , SIGMA ),
matrix[N_spp,N_spp]: SIGMA <- cov_GPL2( Dmat, etasq, rhosq, 0.01),
## adaptive priors
b ~ dnorm(0,1),
etasq~exponential(1),
rhosq~exponential(1)
) , data=dat_list_continuous_phylogenetic , chains=4 , cores=4 , log_lik=TRUE , cmdstan=T, messages=FALSE)
results[2,4:5]<-precis(m_continuous_continuous_phylogenetic)[1,3:4]
print("finished m_continuous_continuous_phylogenetic")
dat_list_strict <- list(
R = as.integer(as.factor(dstan_strict$strictfdom)),
continuouspredictor = standardize(dstan_strict$continuouspredictor),
species = as.integer(as.factor(dstan_strict$corrected_species_id))
)
m_strict_continuous <- ulam(
alist(
R ~ dordlogit( phi , cutpoints ),
phi <-a + b*continuouspredictor,
a ~ dnorm( 0 , 1 ),
b ~ dnorm(0,1),
cutpoints ~ dnorm( 0 , 1.5 )
) , data=dat_list_strict , chains=4 , cores=4 ,cmdstan=T, messages=FALSE)
results[3,4:5]<-precis(m_strict_continuous)[2,3:4]
dat_list_strict_phylogenetic <- list(
R = as.integer(as.factor(dstan_strict$strictfdom)),
continuouspredictor = standardize(dstan_strict$continuouspredictor),
species = as.integer(as.factor(dstan_strict$corrected_species_id))
)
spp_obs<-unique(dstan_strict$corrected_species_id)
spp_obs<-matrix(nrow=length(spp_obs))
rownames(spp_obs)<-unique(dstan_strict$corrected_species_id)
# We match the species in the dataset to the species in the phylogenetic tree
missing<-treedata(inputtree,data=spp_obs,warnings=FALSE)
# We remove species with no data from the tree
mtree<-missing$phy
Dmat<-cophenetic(mtree)
# We calculate the pair-wise phylogenetic distances among the species in the tree; this gives a matrix where values are the total branch length needed to connect two species (diagonal is the distance of a species to itself so zero)
dat_list_strict_phylogenetic$Dmat<-Dmat[ unique(dstan_strict$corrected_species_id),unique(dstan_strict$corrected_species_id) ]/max(Dmat)
colnames(dat_list_strict_phylogenetic$Dmat)<-as.integer(as.factor(colnames(dat_list_strict_phylogenetic$Dmat)))
rownames(dat_list_strict_phylogenetic$Dmat)<-as.integer(as.factor(rownames(dat_list_strict_phylogenetic$Dmat)))
dat_list_strict_phylogenetic$N_spp<-length(unique(dstan_strict$corrected_species_id))
m_strict_continuous_phylogenetic <- ulam(
alist(
R ~ dordlogit( phi , cutpoints ),
phi <-k[species] + b*continuouspredictor,
vector[N_spp]:k ~ multi_normal( 0 , SIGMA ),
matrix[N_spp,N_spp]: SIGMA <- cov_GPL2( Dmat, etasq, rhosq, 0.01),
b ~ dnorm(0,1),
cutpoints ~ dnorm( 0 , 1.5 ),
etasq~exponential(1),
rhosq~exponential(1)
) , data=dat_list_strict_phylogenetic , chains=4 , cores=4 ,cmdstan=T, messages=FALSE)
results[4,4:5]<-precis(m_strict_continuous_phylogenetic)[1,3:4]
print("finished m_strict_continuous_phylogenetic")
# Female dominance classification of intersexual dominance
dat_list_relaxed <- list(
R = as.integer(as.factor(dstan_strict$strictfdom %in% 3))-1,
continuouspredictor = standardize(dstan_strict$continuouspredictor),
species = as.integer(as.factor(dstan_strict$corrected_species_id))
)
m_relaxed_continuouspredictor <- ulam(
alist(
R ~ dbinom(1,p),
logit(p) <- a + b*continuouspredictor ,
a ~ dnorm( 0 , 1 ),
b ~ dnorm( 0 , 0.5 ),
cutpoints ~ dnorm( 0 , 1.5 )
) , data=dat_list_relaxed , chains=4 , cores=4 , cmdstan = T, messages=FALSE )
results[5,4:5]<-precis(m_relaxed_continuouspredictor)[2,3:4]
print("finished m_femaledominance_continuouspredictor")
spp_obs<-unique(dstan_strict$corrected_species_id)
spp_obs<-matrix(nrow=length(spp_obs))
rownames(spp_obs)<-unique(dstan_strict$corrected_species_id)
# We match the species in the dataset to the species in the phylogenetic tree
missing<-treedata(inputtree,data=spp_obs,warnings=FALSE)
# We remove species with no data from the tree
mtree<-missing$phy
Dmat<-cophenetic(mtree)
dat_list_relaxed_phylogenetic <- list(
N_spp = nrow(dstan_strict),
R = as.integer(as.factor(dstan_strict$strictfdom %in% 3))-1,
continuouspredictor = standardize(dstan_strict$continuouspredictor),
species = as.integer(as.factor(dstan_strict$corrected_species_id))
)
dat_list_relaxed_phylogenetic$Dmat<-Dmat[ unique(dstan_strict$corrected_species_id),unique(dstan_strict$corrected_species_id) ]/max(Dmat)
colnames(dat_list_relaxed_phylogenetic$Dmat)<-as.integer(as.factor(colnames(dat_list_relaxed_phylogenetic$Dmat)))
rownames(dat_list_relaxed_phylogenetic$Dmat)<-as.integer(as.factor(rownames(dat_list_relaxed_phylogenetic$Dmat)))
dat_list_relaxed_phylogenetic$N_spp<-length(unique(dstan_strict$corrected_species_id))
m_relaxed_continuous_phylogenetic <- ulam(
alist(
R ~ dordlogit( phi , cutpoints ),
phi <-k[species] + b*continuouspredictor,
vector[N_spp]:k ~ multi_normal( 0 , SIGMA ),
matrix[N_spp,N_spp]: SIGMA <- cov_GPL2( Dmat, etasq, rhosq, 0.01),
b ~ dnorm(0,1),
cutpoints ~ dnorm( 0 , 1.5 ),
etasq~exponential(1),
rhosq~exponential(1)
) , data=dat_list_relaxed_phylogenetic , chains=4 , cores=4 ,cmdstan=T, messages=FALSE)
dat_list_relaxed_phylogenetic
table(dat_list_relaxed_phylogenetic$species)
m_relaxed_continuous_phylogenetic <- ulam(
alist(
R ~ dbinom(1,p),
logit(p) <-k[species] + b*continuouspredictor,
vector[N_spp]:k ~ multi_normal( 0 , SIGMA ),
matrix[N_spp,N_spp]: SIGMA <- cov_GPL2( Dmat, etasq, rhosq, 0.01),
b ~ dnorm(0,1),
cutpoints ~ dnorm( 0 , 1.5 ),
etasq~exponential(1),
rhosq~exponential(1)
) , data=dat_list_relaxed_phylogenetic , chains=4 , cores=4 ,cmdstan=T, messages=FALSE)
source("AnalysisCode/FemaleDominance_FunctionsPairwise.r")
allcontinuouspredictors<-c("sexratio", "SexualDimorphism_MaleWeight_over_FemaleWeight", "CanineDimorphism", "female_average_relatedness", "Synchrony", "r_seasonality_value", "male_skew", "env_harshness", "rainfall_unpredictability","NDVI_Seasonality", "female_canine_height", "male_canine_height", "females","homerange_overlap","perc_aggression_mm","receptive_synchrony","body_mass","relative_testes_mass","relative_femalecaninesize")
alldiscretepredictors<-c("SocOrgPMK","MatSysPMK","female_dispersal","male_dispersal","sexbias_dispersal","jointaggression_females","jointaggression_males","female_evictions","female_infanticide" ,"ovulation_signs","Strata_Wilman","origin")
samplesizetable<-matrix(ncol=3,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size","number of species")
count<-1
for(i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
samplesizetable[count,1]<-continuouspredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$continuouspredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$continuouspredictor)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "continuouspredictor"]<-c(continuouspredictor)
count<-count+1
}
for(i in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[i]
colnames(combined)[colnames(combined) %in% discretepredictor]<-c("discretepredictor")
samplesizetable[count,1]<-discretepredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$discretepredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$discretepredictor)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "discretepredictor"]<-c(discretepredictor)
count<-count+1
}
for (k in 1:1){
# Start with the continuous predictors
for (i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
print(c("continuous",i,"of",length(allcontinuouspredictors),continuouspredictor))
results<-run_analyses_continuouspredictor(continuouspredictor)
ifelse(i==1,allresults<-results,allresults<-rbind(allresults,results))
}
# Next with the discrete predictors
for (j in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[j]
print(c("discrete",j,"of",length(alldiscretepredictors),discretepredictor))
results<-run_analyses_discretepredictor(discretepredictor)
ifelse(j==1,alldiscreteresults<-results,alldiscreteresults<-rbind(alldiscreteresults,results))
}
colnames(alldiscreteresults)<-colnames(allresults)
combinedresults<-rbind(allresults,alldiscreteresults)
}
for (k in 1:1){
# Start with the continuous predictors
for (i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
print(c("continuous",i,"of",length(allcontinuouspredictors),continuouspredictor))
results<-run_analyses_continuouspredictor(continuouspredictor)
ifelse(i==1,allresults<-results,allresults<-rbind(allresults,results))
}
# Next with the discrete predictors
for (j in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[j]
print(c("discrete",j,"of",length(alldiscretepredictors),discretepredictor))
results<-run_analyses_discretepredictor(discretepredictor)
ifelse(j==1,alldiscreteresults<-results,alldiscreteresults<-rbind(alldiscreteresults,results))
}
colnames(alldiscreteresults)<-colnames(allresults)
combinedresults<-rbind(allresults,alldiscreteresults)
}
write.csv(combinedresults,file="intersexualdominance_combinedresults.csv")
names(combined)
allcontinuouspredictors<-c("rainfall_annualvariation","males")
alldiscretepredictors<-c("between_groupconflict")
samplesizetable<-matrix(ncol=3,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size","number of species")
count<-1
for(i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
samplesizetable[count,1]<-continuouspredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$continuouspredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$continuouspredictor)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "continuouspredictor"]<-c(continuouspredictor)
count<-count+1
}
for(i in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[i]
colnames(combined)[colnames(combined) %in% discretepredictor]<-c("discretepredictor")
samplesizetable[count,1]<-discretepredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$discretepredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$discretepredictor)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "discretepredictor"]<-c(discretepredictor)
count<-count+1
}
write.csv(samplesizetable,file="FemdomAnalyses_Oct2022_Samplesizes_additional.csv")
for (k in 1:1){
# Start with the continuous predictors
for (i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
print(c("continuous",i,"of",length(allcontinuouspredictors),continuouspredictor))
results<-run_analyses_continuouspredictor(continuouspredictor)
ifelse(i==1,allresults<-results,allresults<-rbind(allresults,results))
}
# Next with the discrete predictors
for (j in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[j]
print(c("discrete",j,"of",length(alldiscretepredictors),discretepredictor))
results<-run_analyses_discretepredictor(discretepredictor)
ifelse(j==1,alldiscreteresults<-results,alldiscreteresults<-rbind(alldiscreteresults,results))
}
colnames(alldiscreteresults)<-colnames(allresults)
combinedresults<-rbind(allresults,alldiscreteresults)
}
write.csv(combinedresults,file="intersexualdominance_combinedresults_additional.csv")
dstan_strict
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
results<-matrix(nrow=8,ncol=5)
results<-as.data.frame(results)
colnames(results)<-c("outcome", "continuouspredictor","phylogeny", "estimate lower","estimate upper")
results$outcome<-c(rep("perc_won", 2),rep("strict three way", 2),rep("strict female dominance",2),rep("strict male dominance",2))
results$continuouspredictor<-rep(continuouspredictor,8)
results$phylogeny<-c(rep(c("No","Yes"),4))
dstan_continuous <- combined[ complete.cases(combined$perc_won_females,combined$continuouspredictor,combined$corrected_species_id),]
dstan_strict <- combined[ complete.cases(combined$strictfdom,combined$continuouspredictor,combined$corrected_species_id),]
dstan_relaxed <- combined[ complete.cases(combined$mostlyfdom,combined$continuouspredictor,combined$corrected_species_id),]
print("Finished setup")
# Continuous outcome: percentage of fights won by females
dat_list_continuous <- list(
N_spp = nrow(dstan_continuous),
perc_won_females = as.integer(dstan_continuous$perc_won_females),
continuouspredictor = standardize(dstan_continuous$continuouspredictor),
species = as.integer(as.factor(dstan_continuous$corrected_species_id)),
total = rep(100,nrow(dstan_continuous))
)
m_continuous_continuous <- ulam(
alist(
perc_won_females ~ dbinom(total,p),
logit(p) <- a +b*continuouspredictor,
## adaptive priors
a ~ dnorm( 0 , 1 ),
b ~ dnorm(0,1)
) , data=dat_list_continuous , chains=4 , cores=4 , log_lik=TRUE , cmdstan=T, messages=FALSE, refresh=0)
suppressWarnings(  m_continuous_continuous <- ulam(
alist(
perc_won_females ~ dbinom(total,p),
logit(p) <- a +b*continuouspredictor,
## adaptive priors
a ~ dnorm( 0 , 1 ),
b ~ dnorm(0,1)
) , data=dat_list_continuous , chains=4 , cores=4 , log_lik=TRUE , cmdstan=T, messages=FALSE, refresh=0))
precis(m_continuous_continuous)
m_continuous_continuous <- ulam(
alist(
perc_won_females ~ dbinom(total,p),
logit(p) <- a +b*continuouspredictor,
## adaptive priors
a ~ dnorm( 0 , 1 ),
b ~ dnorm(0,1)
) , data=dat_list_continuous , chains=4 , cores=4 , log_lik=TRUE , cmdstan=T, messages=FALSE, refresh=0, verbose = FALSE)
setwd("~/ownCloud/Documents/FemaleDominanceHierarchies/FemaleOverMale/analyses2021/DieterAnalysesJuly2021/Analyses2022/AnalysisCode")
allcontinuouspredictors<-c("sexratio", "SexualDimorphism_MaleWeight_over_FemaleWeight", "CanineDimorphism", "female_average_relatedness", "Synchrony", "r_seasonality_value", "male_skew", "env_harshness", "rainfall_unpredictability","rainfall_annualvariation","NDVI_Seasonality", "female_canine_height", "male_canine_height", "females","males","homerange_overlap","perc_aggression_mm","receptive_synchrony","body_mass","relative_testes_mass","relative_femalecaninesize")
alldiscretepredictors<-c("SocOrgPMK","MatSysPMK","female_dispersal","male_dispersal","sexbias_dispersal","jointaggression_females","jointaggression_males","female_evictions","female_infanticide" ,"ovulation_signs","Strata_Wilman","origin","between_groupconflict")
samplesizetable<-matrix(ncol=3,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size categorical classification","number of species categorical classification", "sample size percentage fights won", "number of species percentage fights won")
samplesizetable<-matrix(ncol=5,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size categorical classification","number of species categorical classification", "sample size percentage fights won", "number of species percentage fights won")
count<-1
for(i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
samplesizetable[count,1]<-continuouspredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$continuouspredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$continuouspredictor)==F,]$corrected_species_id))
samplesizetable[count,4]<-nrow(combined[is.na(combined$continuouspredictor)==F & is.na(combined$perc_won_females)==F,])
samplesizetable[count,5]<-length(unique(combined[is.na(combined$continuouspredictor)==F & is.na(combined$perc_won_females)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "continuouspredictor"]<-c(continuouspredictor)
count<-count+1
}
for(i in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[i]
colnames(combined)[colnames(combined) %in% discretepredictor]<-c("discretepredictor")
samplesizetable[count,1]<-discretepredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$discretepredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$discretepredictor)==F,]$corrected_species_id))
amplesizetable[count,4]<-nrow(combined[is.na(combined$discretepredictor)==F & is.na(combined$perc_won_females)==F,])
samplesizetable[count,5]<-length(unique(combined[is.na(combined$discretepredictor)==F & is.na(combined$perc_won_females)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "discretepredictor"]<-c(discretepredictor)
count<-count+1
}
samplesizetable<-matrix(ncol=5,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size categorical classification","number of species categorical classification", "sample size percentage fights won", "number of species percentage fights won")
count<-1
for(i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
samplesizetable[count,1]<-continuouspredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$continuouspredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$continuouspredictor)==F,]$corrected_species_id))
samplesizetable[count,4]<-nrow(combined[is.na(combined$continuouspredictor)==F & is.na(combined$perc_won_females)==F,])
samplesizetable[count,5]<-length(unique(combined[is.na(combined$continuouspredictor)==F & is.na(combined$perc_won_females)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "continuouspredictor"]<-c(continuouspredictor)
count<-count+1
}
for(i in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[i]
colnames(combined)[colnames(combined) %in% discretepredictor]<-c("discretepredictor")
samplesizetable[count,1]<-discretepredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$discretepredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$discretepredictor)==F,]$corrected_species_id))
samplesizetable[count,4]<-nrow(combined[is.na(combined$discretepredictor)==F & is.na(combined$perc_won_females)==F,])
samplesizetable[count,5]<-length(unique(combined[is.na(combined$discretepredictor)==F & is.na(combined$perc_won_females)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "discretepredictor"]<-c(discretepredictor)
count<-count+1
}
write.csv(samplesizetable,file="FemdomAnalyses_Feb2023_Samplesizes.csv")
allcontinuouspredictors
# Keep this script file in the same folder as the three input files (population data, species variables, phylogeny)
# This command will then tell R where to find these input files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("AnalysisCode/FemaleDominance_LoadData.r")
allcontinuouspredictors<-c("sexratio", "SexualDimorphism_MaleWeight_over_FemaleWeight", "CanineDimorphism", "female_average_relatedness", "Synchrony", "r_seasonality_value", "male_skew", "env_harshness", "rainfall_unpredictability","rainfall_annualvariation","NDVI_Seasonality", "female_canine_height", "male_canine_height", "females","males","homerange_overlap","perc_aggression_mm","receptive_synchrony","body_mass","relative_testes_mass","relative_femalecaninesize")
alldiscretepredictors<-c("SocOrgPMK","MatSysPMK","female_dispersal","male_dispersal","sexbias_dispersal","jointaggression_females","jointaggression_males","female_evictions","female_infanticide" ,"ovulation_signs","Strata_Wilman","origin","between_groupconflict")
samplesizetable<-matrix(ncol=5,nrow=length(allcontinuouspredictors)+length(alldiscretepredictors))
samplesizetable<-as.data.frame(samplesizetable)
colnames(samplesizetable)<-c("predictorvariable","sample size categorical classification","number of species categorical classification", "sample size percentage fights won", "number of species percentage fights won")
count<-1
for(i in 1:length(allcontinuouspredictors)){
continuouspredictor<-allcontinuouspredictors[i]
colnames(combined)[colnames(combined) %in% continuouspredictor]<-c("continuouspredictor")
samplesizetable[count,1]<-continuouspredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$continuouspredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$continuouspredictor)==F,]$corrected_species_id))
samplesizetable[count,4]<-nrow(combined[is.na(combined$continuouspredictor)==F & is.na(combined$perc_won_females)==F,])
samplesizetable[count,5]<-length(unique(combined[is.na(combined$continuouspredictor)==F & is.na(combined$perc_won_females)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "continuouspredictor"]<-c(continuouspredictor)
count<-count+1
}
for(i in 1:length(alldiscretepredictors)){
discretepredictor<-alldiscretepredictors[i]
colnames(combined)[colnames(combined) %in% discretepredictor]<-c("discretepredictor")
samplesizetable[count,1]<-discretepredictor
samplesizetable[count,2]<-nrow(combined[is.na(combined$discretepredictor)==F,])
samplesizetable[count,3]<-length(unique(combined[is.na(combined$discretepredictor)==F,]$corrected_species_id))
samplesizetable[count,4]<-nrow(combined[is.na(combined$discretepredictor)==F & is.na(combined$perc_won_females)==F,])
samplesizetable[count,5]<-length(unique(combined[is.na(combined$discretepredictor)==F & is.na(combined$perc_won_females)==F,]$corrected_species_id))
colnames(combined)[colnames(combined) %in% "discretepredictor"]<-c(discretepredictor)
count<-count+1
}
write.csv(samplesizetable,file="FemdomAnalyses_Feb2023_Samplesizes.csv")
head(combinedresults)
combinedresults$'estimate lower'
combinedresults$association_present<-ifelse(combinedresults$'estimate lower'*combinedresults$'estimate upper'<0,"not","confident" )
head(combinedresults)
